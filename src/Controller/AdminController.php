<?php

namespace App\Controller;

use EasyCorp\Bundle\EasyAdminBundle\Controller\EasyAdminController;
use Symfony\Component\Routing\Annotation\Route;
use Doctrine\ORM\QueryBuilder;
use App\Entity\Reservation;
use App\Entity\Goods;
use Symfony\Component\HttpFoundation\Response;
use EasyCorp\Bundle\EasyAdminBundle\Event\EasyAdminEvents;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\ORM\EntityManager;
use Symfony\Component\HttpFoundation\RedirectResponse;
use EasyCorp\Bundle\EasyAdminBundle\Exception\ForbiddenActionException;
use DateTime;

class AdminController extends EasyAdminController
{
    /** @var array The full configuration of the entire backend */
    protected $config;
    /** @var array The full configuration of the current entity */
    protected $entity = [];
    /** @var Request The instance of the current Symfony request */
    protected $request;
    /** @var EntityManager|null The Doctrine entity manager for the current entity */
    protected $em;

//    /**
//     * @Route("/", name="easyadmin")
//     *
//     * @param Request $request
//     *
//     * @return RedirectResponse|Response
//     *
//     * @throws ForbiddenActionException
//     */
//    public function indexAction(Request $request)
//    {
//        $this->initialize($request);
//
//        if (null === $request->query->get('entity')) {
//            return $this->redirectToBackendHomepage();
//        }
//
//        $action = $request->query->get('action', 'list');
//        if (!$this->isActionAllowed($action)) {
//            throw new ForbiddenActionException(['action' => $action, 'entity_name' => $this->entity['name']]);
//        }
//
//        return $this->executeDynamicMethod($action.'<EntityName>Action');
//    }

    /**
     * Creates Query Builder instance for all the records.
     *
     * @param string      $entityClass
     * @param string      $sortDirection
     * @param string|null $sortField
     * @param string|null $dqlFilter
     *
     * @return QueryBuilder The Query Builder instance
     */
    protected function createListQueryBuilder($entityClass, $sortDirection, $sortField = null, $dqlFilter = null)
    {
        //$response =  parent::createListQueryBuilder('Reservation', $sortDirection, $sortField, $dqlFilter); // TODO: Change the autogenerated stub

        //$response->join('entity.storageTypeId','res');
        //$response->andWhere('res.lastName = :role')->setParameter('role', 'sagir');
        //$response->select('entity.storageTypeId');

        //return $response;

        //return $this->get('easyadmin.query_builder')->createListQueryBuilder($this->entity, $sortField, $sortDirection, $dqlFilter);


        $dateFrom = new \DateTime('- 1 month');
        $dateFrom = $dateFrom->format('Y-m-d');
        $dateTo = new \DateTime("now");
        $dateTo = $dateTo->format('Y-m-d');
//dd($entityClass);



        $queryBuilder = $this->em->createQueryBuilder()
            //->select('SUM(goods.id)')
            ->select(['entity'])
            ->from($entityClass, 'entity')
            ->join('App\Entity\Reservation', 'r')
            ->where('r.storageTypeId = entity.id')
            //->leftJoin('App\Entity\Goods', 'g')
            //->where('r.id = g.reservationId')
            //->leftJoin('App\Entity\GoodsProperty', 'gp')
            //->where('gp.id = g.goodsPropertyId')
            ->andWhere("r.createdAt <= '".$dateTo."'")
            ->andWhere("r.createdAt >= '".$dateFrom."'")
            ->groupBy('entity.id')
        ;
        //dd($queryBuilder->getQuery());
        //dd($queryBuilder->getDQL());

        //if ('price.value.currency' === $sortField) {
            //$sortField = null; // <-- needed to skip auto statements

//            return parent::createListQueryBuilder($entityClass, $sortDirection, $sortField, $dqlFilter)
//                //->select('entity.id')
//                //->from($entityClass, 'entity')
//                ->leftJoin('entity.reservationId', 'r')
//                ->where('r.id = entity.reservationId')
//                ->andWhere("r.createdAt <= '".$dateTo."'")
//                ->andWhere("r.createdAt >= '".$dateFrom."'")
////                ->leftJoin('entity.price', 'price')
////                ->leftJoin('price.value', 'value')
////                ->orderBy('value.currency', $sortDirection)
//            ;
        //}

        //return parent::createListQueryBuilder($entityClass, $sortDirection, $sortField, $dqlFilter);

        return $queryBuilder;
    }

//    /**
//     * The method that is executed when the user performs a 'list' action on an entity.
//     *
//     * @return Response
//     */
//    protected function listAction()
//    {
//        $this->dispatch(EasyAdminEvents::PRE_LIST);
//
//        $fields = $this->entity['list']['fields'];
//        $paginator = $this->findAll($this->entity['class'], $this->request->query->get('page', 1), $this->entity['list']['max_results'], $this->request->query->get('sortField'), $this->request->query->get('sortDirection'), $this->entity['list']['dql_filter']);
//
//        $this->dispatch(EasyAdminEvents::POST_LIST, ['paginator' => $paginator]);
//
//        $parameters = [
//            'paginator' => $paginator,
//            'fields' => $fields,
//            'batch_form' => $this->createBatchForm($this->entity['name'])->createView(),
//            'delete_form_template' => $this->createDeleteForm($this->entity['name'], '__id__')->createView(),
//        ];
//
//        return $this->executeDynamicMethod('render<EntityName>Template', ['list', $this->entity['templates']['list'], $parameters]);
//    }
}
